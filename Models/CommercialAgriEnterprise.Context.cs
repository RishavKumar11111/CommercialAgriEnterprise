//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommercialAgriEnterprise.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CommercialAgriEnterpriseEntities : DbContext
    {
        public CommercialAgriEnterpriseEntities()
            : base("name=CommercialAgriEnterpriseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<BankLoanStatu> BankLoanStatus { get; set; }
        public virtual DbSet<BankMapping> BankMappings { get; set; }
        public virtual DbSet<BeneficiaryCompletion> BeneficiaryCompletions { get; set; }
        public virtual DbSet<BeneficiaryDocument> BeneficiaryDocuments { get; set; }
        public virtual DbSet<BeneFiciaryLandRecordDetail> BeneFiciaryLandRecordDetails { get; set; }
        public virtual DbSet<BeneficiaryMemberDetail> BeneficiaryMemberDetails { get; set; }
        public virtual DbSet<BeneficiaryProjectDetail> BeneficiaryProjectDetails { get; set; }
        public virtual DbSet<BLOBlockLog> BLOBlockLogs { get; set; }
        public virtual DbSet<BLOBlockMapping> BLOBlockMappings { get; set; }
        public virtual DbSet<BLODetailEntry> BLODetailEntries { get; set; }
        public virtual DbSet<BLORecord> BLORecords { get; set; }
        public virtual DbSet<CapitalInvestment> CapitalInvestments { get; set; }
        public virtual DbSet<CapitalInvestmentAnimalPlant> CapitalInvestmentAnimalPlants { get; set; }
        public virtual DbSet<CapitalInvestmentCivilConstruction> CapitalInvestmentCivilConstructions { get; set; }
        public virtual DbSet<CapitalInvestmentElectrification> CapitalInvestmentElectrifications { get; set; }
        public virtual DbSet<CapitalInvestmentLand> CapitalInvestmentLands { get; set; }
        public virtual DbSet<CapitalInvestmentMiscellaneou> CapitalInvestmentMiscellaneous { get; set; }
        public virtual DbSet<CapitalInvestmentPlantMachinery> CapitalInvestmentPlantMachineries { get; set; }
        public virtual DbSet<CapitalInvestmentWaterSupply> CapitalInvestmentWaterSupplies { get; set; }
        public virtual DbSet<CashFlowStatement> CashFlowStatements { get; set; }
        public virtual DbSet<CheckPasswordStatu> CheckPasswordStatus { get; set; }
        public virtual DbSet<CollectorDistrictMapping> CollectorDistrictMappings { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DNODetailEntry> DNODetailEntries { get; set; }
        public virtual DbSet<DNODistrictMapping> DNODistrictMappings { get; set; }
        public virtual DbSet<DPRLog> DPRLogs { get; set; }
        public virtual DbSet<DPRStatu> DPRStatus { get; set; }
        public virtual DbSet<EasyPayErrorCode> EasyPayErrorCodes { get; set; }
        public virtual DbSet<EducationalQualification> EducationalQualifications { get; set; }
        public virtual DbSet<FeasibilityReport> FeasibilityReports { get; set; }
        public virtual DbSet<GoAhead> GoAheads { get; set; }
        public virtual DbSet<GroupType> GroupTypes { get; set; }
        public virtual DbSet<KeyBusinessMatrix> KeyBusinessMatrices { get; set; }
        public virtual DbSet<LGDBlock> LGDBlocks { get; set; }
        public virtual DbSet<LGDDistrict> LGDDistricts { get; set; }
        public virtual DbSet<LGDGP> LGDGPs { get; set; }
        public virtual DbSet<LGDVillage> LGDVillages { get; set; }
        public virtual DbSet<MeansOfFinance> MeansOfFinances { get; set; }
        public virtual DbSet<MobileReg> MobileRegs { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<ProfitabilityProjection> ProfitabilityProjections { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<rDistrict> rDistricts { get; set; }
        public virtual DbSet<RecurringExpenditure> RecurringExpenditures { get; set; }
        public virtual DbSet<RegistrationLog> RegistrationLogs { get; set; }
        public virtual DbSet<Relationship> Relationships { get; set; }
        public virtual DbSet<riCircle> riCircles { get; set; }
        public virtual DbSet<rTehsil> rTehsils { get; set; }
        public virtual DbSet<rVillage> rVillages { get; set; }
        public virtual DbSet<Target> Targets { get; set; }
        public virtual DbSet<TargetLog> TargetLogs { get; set; }
        public virtual DbSet<View_UserDetails> View_UserDetails { get; set; }
        public virtual DbSet<DNORecord> DNORecords { get; set; }
        public virtual DbSet<BLODPRLog> BLODPRLogs { get; set; }
        public virtual DbSet<IntegratedProjectLog> IntegratedProjectLogs { get; set; }
        public virtual DbSet<IntegratedProjectDetail> IntegratedProjectDetails { get; set; }
        public virtual DbSet<BLOFeasibilityLog> BLOFeasibilityLogs { get; set; }
        public virtual DbSet<DNOBackToBLOLog> DNOBackToBLOLogs { get; set; }
        public virtual DbSet<BLORegdLog> BLORegdLogs { get; set; }
        public virtual DbSet<CollectorRecord> CollectorRecords { get; set; }
        public virtual DbSet<DDARecord> DDARecords { get; set; }
        public virtual DbSet<DDABackToBLOLog> DDABackToBLOLogs { get; set; }
        public virtual DbSet<DNODetailLog> DNODetailLogs { get; set; }
        public virtual DbSet<BeneficiaryDetail> BeneficiaryDetails { get; set; }
    
        public virtual ObjectResult<BlockwiseBLORegistration_Result> BlockwiseBLORegistration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BlockwiseBLORegistration_Result>("BlockwiseBLORegistration");
        }
    
        public virtual ObjectResult<DNODetailRecord_Result> DNODetailRecord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DNODetailRecord_Result>("DNODetailRecord");
        }
    
        public virtual ObjectResult<FarmerDetailsRegdDPRDistWiseProcedure_Result> FarmerDetailsRegdDPRDistWiseProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FarmerDetailsRegdDPRDistWiseProcedure_Result>("FarmerDetailsRegdDPRDistWiseProcedure");
        }
    
        public virtual ObjectResult<string> INSERTRECORDAFTERPAYMENT(string referenceNo, string pStatus, string bRCode, string tCode)
        {
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var pStatusParameter = pStatus != null ?
                new ObjectParameter("PStatus", pStatus) :
                new ObjectParameter("PStatus", typeof(string));
    
            var bRCodeParameter = bRCode != null ?
                new ObjectParameter("BRCode", bRCode) :
                new ObjectParameter("BRCode", typeof(string));
    
            var tCodeParameter = tCode != null ?
                new ObjectParameter("TCode", tCode) :
                new ObjectParameter("TCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("INSERTRECORDAFTERPAYMENT", referenceNoParameter, pStatusParameter, bRCodeParameter, tCodeParameter);
        }
    
        public virtual int PRCBENEFICIARYCOMPLETIONBRPT(string goAheadnum)
        {
            var goAheadnumParameter = goAheadnum != null ?
                new ObjectParameter("GoAheadnum", goAheadnum) :
                new ObjectParameter("GoAheadnum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRCBENEFICIARYCOMPLETIONBRPT", goAheadnumParameter);
        }
    
        public virtual ObjectResult<PRCRCDCOUNT_Result> PRCRCDCOUNT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRCRCDCOUNT_Result>("PRCRCDCOUNT");
        }
    
        public virtual int ResetPassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetPassword", usernameParameter, passwordParameter);
        }
    
        public virtual int UpdtAccessFailCount(string email, Nullable<int> accessFail)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var accessFailParameter = accessFail.HasValue ?
                new ObjectParameter("AccessFail", accessFail) :
                new ObjectParameter("AccessFail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdtAccessFailCount", emailParameter, accessFailParameter);
        }
    
        public virtual int updtcollectorPassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updtcollectorPassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<FarmerDetailsDistWiseProcedure_Result> FarmerDetailsDistWiseProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FarmerDetailsDistWiseProcedure_Result>("FarmerDetailsDistWiseProcedure");
        }
    
        public virtual ObjectResult<TARGET_ALL_Result> TARGET_ALL(string pCODE, string fYEAR)
        {
            var pCODEParameter = pCODE != null ?
                new ObjectParameter("PCODE", pCODE) :
                new ObjectParameter("PCODE", typeof(string));
    
            var fYEARParameter = fYEAR != null ?
                new ObjectParameter("FYEAR", fYEAR) :
                new ObjectParameter("FYEAR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TARGET_ALL_Result>("TARGET_ALL", pCODEParameter, fYEARParameter);
        }
    }
}
